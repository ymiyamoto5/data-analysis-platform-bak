version: '3.3'

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    environment:
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - network.host=0.0.0.0
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - 'ES_JAVA_OPTS=-Xms4096m -Xmx4096m'
    env_file: ${ENV_FILE}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    restart: always
    ports:
      - '${IP}:9200:9200/tcp'
    volumes:
      - ${DATA_DIR}:/usr/share/elasticsearch/data
    networks:
      - docker_network
    # logging:
    #   driver: 'fluentd'
    #   options:
    #     fluentd-address: '0.0.0.0:24224'
    #     tag: 'docker.{{.Name}}'
    #     fluentd-async-connect: 'true'
  kibana:
    image: docker.elastic.co/kibana/kibana:7.14.0
    environment:
      SERVER_NAME: 'kibana'
      ELASTICSEARCH_HOSTS: 'http://elasticsearch:9200'
      ELASTICSEARCH_REQUESTTIMEOUT: '60000'
      ELASTICSEARCH_USERNAME: ${ELASTIC_USERNAME}
      ELASTICSEARCH_PASSWORD: ${ELASTIC_PASSWORD}
      I18N_LOCALE: 'ja-JP'
    env_file: ${ENV_FILE}
    restart: always
    ports:
      - '${IP}:5601:5601/tcp'
    depends_on:
      - elasticsearch
    networks:
      - docker_network
    # logging:
    #   driver: 'fluentd'
    #   options:
    #     fluentd-address: '0.0.0.0:24224'
    #     tag: 'docker.{{.Name}}'
    #     fluentd-async-connect: 'true'
  notebook:
    image: build_jupyter/base-notebook
    build:
      context: ..
      dockerfile: docker/jupyter.dockerfile
    env_file: ${ENV_FILE}
    restart: always
    ports:
      - '${IP}:8888:8888/tcp'
    working_dir: '/home/jovyan/work'
    volumes:
      - ../notebooks:/home/jovyan/work
      - ../backend:/home/jovyan/backend
      - ${DATA_DRIVE}:/mnt/datadrive
    command: start-notebook.sh --NotebookApp.token=''
    networks:
      - docker_network
    # logging:
    #   driver: 'fluentd'
    #   options:
    #     fluentd-address: '0.0.0.0:24224'
    #     tag: 'docker.{{.Name}}'
    #     fluentd-async-connect: 'true'
  webap:
    build:
      context: ..
      dockerfile: docker/webap.dockerfile
    environment:
      MODULE_NAME: 'backend.app.main'
    env_file: ${ENV_FILE}
    restart: always
    ports:
      - '${IP}:80:80/tcp'
    volumes:
      - ${DATA_DRIVE}:/mnt/datadrive
      - /run:/run
      - ../backend:/app/backend
    depends_on:
      - elasticsearch
      # - fluentd
    networks:
      - docker_network
    # logging:
    #   driver: 'fluentd'
    #   options:
    #     fluentd-address: '0.0.0.0:24224'
    #     tag: 'docker.{{.Name}}'
    #     fluentd-async-connect: 'true'
  # fluentd:
  #   image: build_fluent/fluentd:v1.14.1
  #   build:
  #     context: .
  #     dockerfile: fluentd.dockerfile
  #   restart: always
  #   command: >
  #     /usr/bin/fluentd -c /fluentd/etc/fluent.conf -v
  #   ports:
  #     - '24224:24224'
  #     - '24224:24224/udp'
  #   volumes:
  #     - ${DATA_DRIVE}/fluentd/log:/fluentd/log
  #     - ./fluent.conf:/fluentd/etc/fluent.conf:ro
  #   networks:
  #     - docker_network
  #   depends_on:
  #     - elasticsearch
  metricbeat:
    image: build_docker.elastic.co/beats/metricbeat:7.14.0
    build:
      context: .
      dockerfile: metricbeat.dockerfile
    user: root
    env_file: ${ENV_FILE}
    environment:
      - ELASTICSEARCH_HOST=elasticsearch:9200
      - KIBANA_HOST=elasticsearch:5601
      - NO_PROXY=elasticsearch
    restart: always
    volumes:
      - /proc:/hostfs/proc:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /:/hostfs:ro
      - /var/run/docker.sock:/var/run/docker.sock
      # - ../docker/metricbeat.docker.yml:/usr/share/metricbeat/metricbeat.yml:ro
    command: -system.hostfs=/hostfs
    depends_on:
      - elasticsearch
    networks:
      - docker_network
    # logging:
    #   driver: 'fluentd'
    #   options:
    #     fluentd-address: '0.0.0.0:24224'
    #     tag: 'docker.{{.Name}}'
    #     fluentd-async-connect: 'true'
  mlflow:
    build:
      context: .
      dockerfile: mlflow.dockerfile
    volumes:
      - mlflow:/mlflow
    ports:
      - ${IP}:5000:5000
    depends_on:
      - minio
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: minio-access-key
      AWS_SECRET_ACCESS_KEY: minio-secret-key
    command: mlflow server --backend-store-uri sqlite:///mlflow.db --default-artifact-root s3://default/ --host 0.0.0.0 --port 5000
    restart: always
    networks:
      - docker_network
    # logging:
    #   driver: 'fluentd'
    #   options:
    #     fluentd-address: '0.0.0.0:24224'
    #     tag: 'docker.{{.Name}}'
    #     fluentd-async-connect: 'true'
  minio:
    image: minio/minio
    ports:
      - ${IP}:9000:9000
      - ${IP}:9001:9001
    restart: always
    volumes:
      - minio1:/export
    environment:
      MINIO_ROOT_USER: minio-access-key
      MINIO_ROOT_PASSWORD: minio-secret-key
      MINIO_SERVER_URL: http://${IP}:9000
    command: server /export --console-address :9001
    networks:
      - docker_network
    # logging:
    #   driver: 'fluentd'
    #   options:
    #     fluentd-address: '0.0.0.0:24224'
    #     tag: 'docker.{{.Name}}'
    #     fluentd-async-connect: 'true'
  defaultbucket:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc alias set minio http://${IP}:9000 minio-access-key minio-secret-key) do echo 'try to create buckets...' && sleep 1; done;
      /usr/bin/mc mb minio/default;
      /usr/bin/mc policy set public minio/default;
      exit 0;
      "
    networks:
      - docker_network
    # logging:
    #   driver: 'fluentd'
    #   options:
    #     fluentd-address: '0.0.0.0:24224'
    #     tag: 'docker.{{.Name}}'
    #     fluentd-async-connect: 'true'
  rabbitmq:
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - '${IP}:4369:4369'
      - '${IP}:5672:5672'
      - '${IP}:25672:25672'
      - '${IP}:15672:15672'
    networks:
      - docker_network
    # logging:
    #   driver: 'fluentd'
    #   options:
    #     fluentd-address: '0.0.0.0:24224'
    #     tag: 'docker.{{.Name}}'
    #     fluentd-async-connect: 'true'
  redis:
    image: redis:latest
    ports:
      - '${IP}:6379:6379'
    networks:
      - docker_network
    # logging:
    #   driver: 'fluentd'
    #   options:
    #     fluentd-address: '0.0.0.0:24224'
    #     tag: 'docker.{{.Name}}'
    #     fluentd-async-connect: 'true'
  worker:
    build:
      context: ..
      dockerfile: docker/celery.dockerfile
    volumes:
      - ../backend:/backend
      - ${DATA_DRIVE}:/mnt/datadrive
    env_file: ${ENV_FILE}
    # environment:
    #   - CELERY_BROKER_URL=pyamqp://guest:guest@rabbitmq:5672
    #   - CELERY_RESULT_BACKEND=redis://redis:6379/0
    command: celery -A backend.app.worker worker -l info -c 4
    depends_on:
      - webap
      - rabbitmq
      - redis
    networks:
      - docker_network
    # logging:
    #   driver: 'fluentd'
    #   options:
    #     fluentd-address: '0.0.0.0:24224'
    #     tag: 'docker.{{.Name}}'
    #     fluentd-async-connect: 'true'
  flower:
    image: mher/flower
    environment:
      - no_proxy=rabbitmq
      # - CELERY_BROKER_URL=pyamqp://guest:guest@rabbitmq:5672
      - FLOWER_PORT=5555
    env_file: ${ENV_FILE}
    ports:
      - ${IP}:5555:5555
    depends_on:
      - rabbitmq
      - worker
    networks:
      - docker_network

networks:
  docker_network:
    driver: bridge

volumes:
  mlflow:
  minio1:
